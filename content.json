{"posts":[{"title":"时间过得真快","text":"光是hexo的基础搭建，就折腾了三个工作日的下班时间。 这其中，第一次搭建花了一天，自己折腾骚操作花了一天，被奇怪的bug卡住又花了一天。 每天下班后开始研究，不知不觉2个小时过去了，又匆匆忙忙地健身、洗漱、睡觉，第二天又是一样的轮回。 恍惚之中，脑海里冒出一个念头：时间过得真快。 我需要时间思考，一天可用的12个小时，如何提升效率。","link":"/2023/01/31/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E6%97%B6%E9%97%B4%E8%BF%87%E5%BE%97%E7%9C%9F%E5%BF%AB/"},{"title":"有些事还是看别人做更舒服","text":"比如扑克牌花切， 你切牌的时候有多靓仔， 你收拾的时候就有多狼狈。 做之前评估一下收益和风险， 这么一比，爪子刀、蝴蝶刀更好玩。","link":"/2023/01/16/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E6%9C%89%E4%BA%9B%E4%BA%8B%E8%BF%98%E6%98%AF%E7%9C%8B%E5%88%AB%E4%BA%BA%E5%81%9A%E6%9B%B4%E8%88%92%E6%9C%8D/"},{"title":"unable to verify the first certificate","text":"原因steam++等加速器会在本地安装证书 目前已知会出现的情境： npm install picgo上传github图床 解决关掉就行了","link":"/2023/02/09/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/unable%20to%20verify%20the%20first%20certificate/"},{"title":"给生活留一些深度思考的时间","text":"上班，下班，匆匆忙忙地入睡，第二天又是一样的轮回。 生活应该停一停，留一段时间，彻底停下来。 远离所有人，远离所有干扰，拿起笔，好好地思考，慢慢地琢磨自己的生活。 哪里出了问题，总觉得不舒服，不自在。 未来往哪里走。","link":"/2023/02/16/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%BB%99%E7%94%9F%E6%B4%BB%E7%95%99%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%83%E7%9A%84%E6%97%B6%E9%97%B4/"},{"title":"cron语法","text":"hello world Cron语法秒 分 时 日 月 周 年（选填，有的框架不支持） 基础： 每xx：* 指定时间：1,2,5,7 123450 * * * * *每分钟的0秒2023-03-03 11:00:002023-03-03 11:01:002023-03-03 11:02:00 周期，从xx到xx：1-3（相当于连续的指定时间） 123451-2 * * * * *每分钟的1-2秒2023-03-03 11:00:012023-03-03 11:00:022023-03-03 11:01:01 从xx开始，每隔xx执行：1/3 123452/3 * * * * *从每分钟的2秒开始，3秒执行一次2023-03-03 11:00:022023-03-03 11:00:052023-03-03 11:00:08 特殊： 日和周，可以不指定：? 指定周，1表示周日，按照国外的算法 1234//每月每天的12：000 0 12 * * ?//每月每周2（！！！）的12：000 0 12 ? * 3 日和周，可以表示本月最后一个：L（因为大小月，不好指定） 12345//每月的最后一天的12：000 0 12 L * ?//每月的最后一个周20 0 12 ? * 3L//两个同时用，以 日 为主 日，可以表示离某日最近的工作日：3W（可能会往前算一天）如果3号是周6，那么会在2号执行如果3号是周日，那么会在4号执行","link":"/2023/03/03/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/cron%E8%AF%AD%E6%B3%95/"},{"title":"ini语法","text":"hello world 123456;分号开头的是注释comments;[]包裹的是节点section;数据用key=value的格式[user]name=zhangsanage=123","link":"/2023/03/03/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/ini%E8%AF%AD%E6%B3%95/"},{"title":"http请求的连接前时间过长","text":"hello world 起因同一个网页在一秒钟异步发送大量请求，最后连接超时。 浏览器f12查看时间，发现Queueing、Stalled、Initial Connection时间很长，而真正跟服务器请求的时间很短，所以排除接口超时的问题。 查阅结果： Queueing/Stalled时间长：网站使用http1.0协议，最大tcp连接为6（不同浏览器有出入），超过6个请求后，其他请求进入阻塞，等待固定时间，每6个请求一组，等待时间越来越长，最后超时。https://www.cnblogs.com/ljc021/p/15452086.html Initial Connection时间长：解析localhost时间慢，谷歌内核特有的问题，火狐不会。https://heary.cn/posts/Chromium内核浏览器访问localhost时的初始连接（initial-connection）高延迟问题/（题外话，网页直接复制该url，再粘贴到别处，会出现中文被解析成乱码，导致无法访问） 解决未解决，猜测把异步改成同步可能有效。 引申知识点 http1.0/1.1规定最大tcp连接为6个，因此，http2.0引入多路复用来解决该问题。 http2.0基于https","link":"/2023/03/03/%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/http%E8%AF%B7%E6%B1%82%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%89%8D%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF/"},{"title":"sql常规语法","text":"hello world sql常规语法delete join：delete ${table} from 1234delete u --重点from user ujoin role r on u.id = r.user_idwhere r.id = 3","link":"/2023/03/20/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/sql%E5%B8%B8%E8%A7%84%E8%AF%AD%E6%B3%95/"},{"title":"sql一些特殊语法","text":"hello world sql特殊语法 这里的数据表示支持该功能的数据库 concat()拼接字符串，会自动转换类型 sqlserver-2012,mysql 1select concat(id,'-',name,'adfadsf') from user cast()修改数据类型 sqlserver 1select cast(age as varchar) from user case when判断语句，类似if 可用于：mysql，sqlserver 1case when &lt;boolean&gt; then &lt;A&gt; else &lt;B&gt; end 示例 1234567selectcase when age &lt; 12 then 'aaa' when age &gt; 12 and age &lt; 18 then 'bbb' else 'ccc'end as msgfrom user for xml path()转成xml 可用于：sqlserver 示例： 1234select id,name from user for xml path('')--&lt;id&gt;1&lt;/id&gt;&lt;name&gt;张三&lt;/name&gt; 123456select id,name from user for xml path('hello')--&lt;hello&gt; &lt;id&gt;1&lt;/id&gt; &lt;name&gt;张三&lt;/name&gt;&lt;/hello&gt; 获取一列的所有数据，转换成一条记录，并用 , - 等分隔符隔开 12345select '-' + id from user for xml path('hello')--&lt;hello&gt; -1-2-3-4-5-6&lt;/hello&gt; 再去掉hello 123select '-' + id from user for xml path('')---1-2-3-4-5-6 stuff()类似于replace，替换字符串 可用于：sqlserver 1stuff(&lt;数据&gt;,&lt;从哪里开始&gt;,&lt;删掉几个字符&gt;,&lt;填充的字符&gt;) 示例： 123select stuff('你好',1,1,'hello') from user--hello好 于是把 for xml path() 和 stuff() 融合一下 就能把1前面的符号去掉了（替换成空字符串） 只能用子查询，还要去重 12345678--注意拼接的字段，需要转换成字符串类型select distinct stuff( (select '-' + id from user for xml path('')), 1,1,'' ) from user--1-2-3-4-5-6 with asrank和row_number相同点： 语法相同 都会生成一个序号。 不同点： rank中order by的字段如果相同，生成的序号相同，并且会跳过一些序号 比如，aabb 12345678910--rank1 a1 a3 b3 b--row_number1 a2 a3 b4 b 使用如下 sqlserver 123456789select --此处指定了根据id排序，也可以不指定，用 order by (select 0) desc --但是，根据rank的特性，所有select 0的值都相等，所以最后结果也全都是1 row_number() over(order by id desc) as no, namefrom user --1 zhangsan2 lisi 用row_number做分页while 循环cursor 游标相当于for循环 sqlserver 和java类比一下 12345userList.stream().map(User::getAge).forEach(e-&gt; if(e &gt; 18){ System.out.println(&quot;hello world&quot;) } ) 12345678910111213141516171819declare @i int--1.定义一个游标，相当于map(User::getAge)declare test_cursor cursor for (select age from user)--2.打开游标open test_cursor--3.开始循环，差不多手动for循环fetch next from test_cursor into @i --固定写法 while @@FETCH_STATUS = 0 begin if @i &gt; 18 print 'hello world' --固定写法，相当于for下一个 fetch next from test_cursor into @i end--3.关闭 close test_cursor--4.释放资源deallocate test_cursor 抽象语法 12345678910declare @&lt;param&gt; intdeclare &lt;cursorName&gt; cursor for (&lt;sql&gt;)open &lt;cursorName&gt;fetch next from &lt;cursorName&gt; into @&lt;param&gt; while @@FETCH_STATUS = 0 begin fetch next from &lt;cursorName&gt; into @&lt;param&gt; endclose &lt;cursorName&gt;deallocate &lt;cursorName&gt;","link":"/2023/03/20/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/sql%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E8%AF%AD%E6%B3%95/"},{"title":"docker中安装vim","text":"docker里的image有的干净到连vi、vim都没有。 步骤转载 https://blog.csdn.net/qq_33770578/article/details/125748826 安装命令 1apt-get install vim 如果出现 1234Reading package lists... DoneBuilding dependency tree Reading state information... DoneE: Unable to locate package vim 需要更新apt，然后再次install，比较慢 1apt-get update","link":"/2023/02/01/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/docker/docker%E4%B8%AD%E5%AE%89%E8%A3%85vim/"},{"title":"docker命令","text":"docker创建新容器，并启动：run1 启动已有容器：start12docker start &lt;command&gt; &lt;name&gt;-i 直接进容器里敲命令 在外面执行容器里的命令：exec1docker exec &lt;command&gt; &lt;name&gt; {} {}表示容器内部的命令，大多是linux相关的 进入容器：1docker exec -it name /bin/bash 退出容器，但容器保持后台运行：ctrl + p + q","link":"/2023/02/21/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/docker/docker%E5%91%BD%E4%BB%A4/"},{"title":"git命令","text":"语法克隆仓库：clone默认在当前路径下创建一个文件夹 可以用 . 表示clone到当前路径 1git clone &lt;git地址&gt; &lt;clone到哪个文件夹&gt; 添加远程仓库：remote1git remote add &lt;url太长，取个别名&gt; &lt;url&gt; show退出：q","link":"/2023/02/21/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/git/git%E5%91%BD%E4%BB%A4/"},{"title":"hexo安装、部署、换主题、常用命令","text":"基础的官网都有。 一条龙换主题初始化——换主题——部署到GitHub——hexo源文件推送到分支 初始化 1hexo init 换主题Icarus，各个主题的github主页有，尽量用npm安装 git clone很慢 cnpm下完该主题有bug，没找到解决方案 1npm install hexo-theme-icarus 修改配置文件 _config.yml 的 theme 启动看效果 1hexo s 部署 安装部署插件 1npm install hexo-deployer-git --save 一键部署 1hexo d 推送hexo目录下源文件到github分支（方便换电脑的时候） 初始化git 1git init 添加远程仓库 1git remote add 自定义仓库别名 仓库地址 提交所有东西，hexo自带.gitignore 12git add --allgit commit -m &quot;first commit&quot; 新建一个分支hexo，推送上去 12git checkout hexogit push 上面的仓库别名 hexo","link":"/2023/01/31/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/hexo/hexo%E5%AE%89%E8%A3%85%E3%80%81%E9%83%A8%E7%BD%B2%E3%80%81%E6%8D%A2%E4%B8%BB%E9%A2%98%E3%80%81%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"title":"hexo迁移到另一台电脑","text":"hexo迁移hexo init只是生成一些初始化文件，如果这些文件整个上传github，到时候直接git clone就能用 clone到当前文件夹 1git clone &lt;url&gt; . 切换到存hexo源文件的branch 1git checkout &lt;name&gt; 安装依赖 1yarn 或 1npm install 踩坑yarn 命令有的时候会卡死在 Linking dependencies ，但其实重新开个cmd窗口就已经能用了。 那个卡死的窗口，目前除了重启电脑，没找到别的办法。","link":"/2023/02/21/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/hexo/hexo%E8%BF%81%E7%A7%BB%E5%88%B0%E5%8F%A6%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91/"},{"title":"picgo上传失败","text":"unable to verify the first certificate解决steam++等加速器关掉就好了","link":"/2023/02/01/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/picgo/picgo%E4%B8%8A%E4%BC%A0%E5%A4%B1%E8%B4%A5/"},{"title":"sqlserver","text":"sqlserver设置自增已经创建了表，如何设置自增 以下为模板，注意占位符${}和注释–处，替换即可 ${tableName}：表名 ${columnName}：自增字段 删掉表，重建（可保留数据）12345678910111213141516--重建新表CREATE TABLE dbo.Tmp_${tableName}( ${colomnName} int NOT NULL IDENTITY (1, 1), --other columns) ON [PRIMARY];SET IDENTITY_INSERT dbo.Tmp_${tableName} ON;--将原表的数据转移到新表IF EXISTS(SELECT * FROM dbo.${tableName}) INSERT INTO dbo.Tmp_${tableName} (${columnName}, --other columns which need to save data ) SELECT ${columnName}, --other columns which need to save data FROM dbo.${tableName} TABLOCKX;SET IDENTITY_INSERT dbo.Tmp_${tableName} OFF;--删掉DROP TABLE dbo.${tableName};--改名Exec sp_rename 'Tmp_${tableName}', '${tableName}'; 删掉原来的字段 数据不保留 如果字段是主键会报错 123456--插入新列Alter Table ${tableName} Add ${columnName}_new Int Identity(1,1);--删除旧列Alter Table ${tableName} Drop Column ${columnName};--新列改名Exec sp_rename '${tableName}.${columnName}_new', '${columnName}','Column'; 同时删掉主键版本 1234567891011121314151617--插入新列Alter Table ${tableName} Add ${columnName}_new Int Identity(1,1);--先删掉旧的主键DECLARE @SQL VARCHAR(4000);SET @SQL = 'ALTER TABLE ${tableName} DROP CONSTRAINT |ConstraintName| ';--动态获取主键名SET @SQL = REPLACE(@SQL, '|ConstraintName|', ( SELECT name FROM sysobjects WHERE xtype = 'PK' AND parent_obj = OBJECT_ID('${tableName}')));EXEC (@SQL);--此时可以正常删除旧列Alter Table ${tableName} Drop Column ${columnName};--新列改名Exec sp_rename '${tableName}.${columnName}_new', '${columnName}','Column';--设置为primary keyALTER TABLE [dbo].[${tableName}] ADD PRIMARY KEY CLUSTERED ([${columnName}])WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);","link":"/2023/01/30/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/sqlserver/sqlserver%E8%87%AA%E5%A2%9E/"},{"title":"yarn使用","text":"yarn1https://yarnpkg.com 安装nodejs版本16以上自带，开启就行了。 windows需要管理员权限打开cmd 1corepack enable 下载依赖：add全局安装 1yarn global add &lt;name&gt; 踩坑：add后如果cmd找不到命令查看add的bin目录，然后加到环境变量里去 1yarn global bin","link":"/2023/02/21/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/yarn/yarn%E4%BD%BF%E7%94%A8/"},{"title":"windows快捷键","text":"windows键盘控制win + e打开文件管理器 tab在右边的界面选择文件 shift + tab在左边的界面选择文件 f3切换到上方搜索栏 f4切换到上方路径栏 cmd窗口f7 打开一个小悬浮窗，显示历史输入的命令 可上下移动，左、右可以选择命令，回车直接执行","link":"/2023/02/21/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/windows/windows%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"title":"右键打开cmd","text":"打开注册表12win + r输入regedit 找到文件夹位置1234HKEY_CLASSES_ROOT- Directory - Background - shell 新建项（文件夹），名字随意123shell- openCmd - command openCmd中（右边的窗口）右键（默认），点击修改，输入：在此处打开cmd 此时去桌面右键，就会多一个选项 右键空白处，点击新增字符串，重命名为Icron右键Icon，点击修改，输入：cmd.exe 再去桌面右键，选项会显示图标 也可以随便输入一个绝对路径，","link":"/2023/01/14/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/windows/%E5%8F%B3%E9%94%AE%E6%89%93%E5%BC%80cmd/"},{"title":"javascript语法","text":"hello world 监听器onclick和addEventListeneronclick写死在html里 1&lt;input type=&quot;button&quot; id=&quot;&quot; onclick=&quot;test()&quot; value=&quot;run&quot;/&gt; listener更灵活 12345function test(){}let but = document.getElementById('button1');but.addEventListener('click',function(event){ test();}); 闭包解释123456789101112function makeAdder(x) { return function(y) { return x + y; };}var add5 = makeAdder(5);var add10 = makeAdder(10);console.log(add5(2)); // 7console.log(add10(2)); // 12 相当于java中的 12345678910111213public class MakeAdder{ int x; public MakeAdder(int x){ this.x = x; } public int makeAdder(int y){ return this.x + y; }}MakeAdder add5 = new MakeAdder(5);add5.makeAdder(2); //7","link":"/2023/02/01/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/javascript/javascript%E8%AF%AD%E6%B3%95/"},{"title":"PropertyDescriptor使用","text":"hello world PropertyDescriptor使用 内部方法是synchronized 12345678910111213141516171819202122232425262728public class Test{ public static void main(String[] args) { User obj = new User(); Class&lt;? extends User&gt; clazz = obj.getClass(); Field[] fields = clazz.getDeclaredFields(); obj.setUSR(&quot;hello&quot;); //写数据 for (Field e : fields) { if (!e.getName().toUpperCase().equals(&quot;USR&quot;)) { continue; } PropertyDescriptor pd = new PropertyDescriptor(e.getName(), clazz); //获得写方法 Method wM = pd.getWriteMethod(); //实际情况中需要判断下他的参数类型 wM.invoke(obj, obj.getUSR()+&quot;~~&quot;); } //读数据 for (Field e : fields) { if (!e.getName().toUpperCase().equals(&quot;USR&quot;)) { continue; } PropertyDescriptor pd = new PropertyDescriptor(e.getName(), clazz); Method rM = pd.getReadMethod();//获得读方法 System.out.println(rM.invoke(obj)); } }}","link":"/2023/03/03/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/PropertyDescriptor%E4%BD%BF%E7%94%A8/"},{"title":"java函数式编程","text":"hello world 函数式编程原理 匿名内部类 + lambda表达式 当一个接口只有一个方法时 123public interface Student{ String say();} 调用它 123456teacher.listen(new Student(){ @Override public String say(){ return &quot;hello&quot;; }}) 改成lambda 1teacher.listen(()-&gt;&quot;hello&quot;); 这就成了函数式编程 官方提供的util被抽象成了四大类： 消费 123public interface Consumer&lt;T&gt; { void accept(T t);} 转换 123public interface Function&lt;T, R&gt; { R apply(T t);} 判断 123public interface Predicate&lt;T&gt; { boolean test(T t);} 创造 123public interface Supplier&lt;T&gt; { T get();}","link":"/2023/03/20/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/java%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"},{"title":"api使用","text":"hello world java一些Api使用mapcomputeIfAbsent没有就赋值，返回赋值 1234567map.computeIfAbsent(key,e-&gt;new String());//等同于if(map.get(key)==null){ String value = new String(); map.put(value); return value;} putIfAbsent有就返回 没有就赋值，返回null 12345678910map.putIfAbsent(key,new String())//等同于String value = map.get(key);if(value == null){ value = new String(); map.put(value); return null;}else{ return value;}","link":"/2023/03/20/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/api%E4%BD%BF%E7%94%A8/"},{"title":"java发邮件","text":"hello world java发邮件步骤 基础配置 邮件内容 发送 主要对象 Session，保存配置，生成 Transport 对象 MimeMessage，邮件内容 MimeBodyPart，邮件的表身部分 Transport ，用于连接、发送邮件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051public void sendMail(){ String mail126 = &quot;f13857719092@126.com&quot;; String mail163 = &quot;f1210539148@163.com&quot;; String mailQQ = &quot;1504559967@qq.com&quot;; String host = &quot;smtp.163.com&quot;; //默认465 String port = &quot;465&quot;; //发送的配置 Properties properties = new Properties(); properties.setProperty(&quot;mail.smtp.user&quot;, &quot;emailTest&quot;); properties.setProperty(&quot;mail.smtp.host&quot;, host); properties.setProperty(&quot;mail.smtp.port&quot;, port); properties.setProperty(&quot;mail.smtp.auth&quot;, &quot;true&quot;); properties.setProperty(&quot;mail.smtp.connectiontimeout&quot;, &quot;5000&quot;); properties.setProperty(&quot;mail.smtp.timeout&quot;, &quot;3000&quot;); properties.setProperty(&quot;mail.smtp.writetimeout&quot;, &quot;5000&quot;); properties.setProperty(&quot;mail.smtp.ssl.enable&quot;, &quot;true&quot;); properties.setProperty(&quot;mail.smtp.starttls.enable&quot;, &quot;true&quot;); //发送邮箱的账号密码 Session session = Session.getInstance(properties, new UserPassAuthenticator(mail163, &quot;FKRXHACUKZIABFWK&quot;)); //邮件基本信息 MimeMessage mimeMessage = new MimeMessage(session); mimeMessage.setSubject(&quot;testEmail测试邮件&quot;, &quot;utf-8&quot;); mimeMessage.setFrom(new InternetAddress(mail163)); mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress(mail126));//发给谁 mimeMessage.setRecipient(Message.RecipientType.CC, new InternetAddress(mailQQ));//抄送 mimeMessage.setSentDate(new Date()); mimeMessage.setText(&quot;hello from&quot;);//正文，但会被后面的覆盖 Multipart multipart = new MimeMultipart(); //添加正文（第一个text会被识别为正文，后面的都会被设置为附件）: BodyPart textpart = new MimeBodyPart(); textpart.setContent(&quot;hello here is you data&quot;, &quot;text/html;charset=utf-8&quot;); multipart.addBodyPart(textpart); //添加附件: BodyPart imagepart = new MimeBodyPart(); String filePath = &quot;&quot;; imagepart.setFileName(filePath); imagepart.setDataHandler(new DataHandler(new ByteArrayDataSource(new FileInputStream(filePath), &quot;application/octet-stream&quot;))); multipart.addBodyPart(imagepart); // 设置邮件内容为multipart: mimeMessage.setContent(multipart); //连接、发送、关闭 Transport transport = session.getTransport(&quot;smtp&quot;); transport.connect(); transport.sendMessage(mimeMessage, mimeMessage.getAllRecipients()); transport.close();} 邮件内容 1234//可以设置各种类型mimePart.setContent();//只能设置string类型正文，相当于content的子集mimePart.setText(); spring mail1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&lt;/dependency&gt; 1234567891011javaMailSender.setHost(host);javaMailSender.setUsername(username);javaMailSender.setPassword(password);javaMailSender.setDefaultEncoding(&quot;utf-8&quot;);Properties properties = new Properties();properties.setProperty(&quot;mail.smtp.timeout&quot;, &quot;3000&quot;);properties.setProperty(&quot;mail.smtp.writetimeout&quot;, &quot;5000&quot;);javaMailSender.setJavaMailProperties(properties);//测试连接javaMailSender.testConnection();","link":"/2023/03/20/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/java%E5%8F%91%E9%82%AE%E4%BB%B6/"},{"title":"java和c#之间的byte转换","text":"hello world java和c#的byte互相转换java中，byte为-128127c#中，byte为0255 1234567891011//0~127两边相同//128~255需要转换//需要用int接收c#的数据public Byte convert(int data){ if(0&lt;=data &amp;&amp; data&lt;=127) return (byte)data; else if(128&lt;=data &amp;&amp; data&lt;=255) return (byte)(data - 256); else return null;}","link":"/2023/03/03/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/java%E5%92%8Cc-%E4%B9%8B%E9%97%B4%E7%9A%84byte%E8%BD%AC%E6%8D%A2/"},{"title":"java正则表达式","text":"hello world java正则123456789101112//正则表达式String patternStr=&quot;\\\\b(delete|drop|update)\\\\b&quot;;//生成Pattern pattern = Pattern.compile(patternStr, Pattern.CASE_INSENSITIVE);//开始匹配String input = &quot;drop table user&quot;;Matcher matcher = pattern.matcher(input);//打印所有匹配的字符while (matcher.find()) { String matchStr = Matcher.group(); System.out.println(matchStr);}","link":"/2023/03/20/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"title":"java测试mock","text":"hello world Mock+junitclass上需要加注解junit5 1@ExtendWith(MockitoExtension.class) junit4 1@RunWith(MockitoJUnitRunner.class) 以下用junit5mock基础使用很普通的service层调用mapper层 12345678@Datapublic class UserService{ private UserMapper userMapper; public List&lt;User&gt; getList(int id){ //一些复杂的逻辑 return userMapper.getList(id); }} 这是需要测试service的方法逻辑是否正确，所以加上@InjectMocks，作为测试对象 而内部调用的mapper属于无关项，加上@Mock，作为模拟数据 12345678910111213141516171819202122232425262728293031323334import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.junit.jupiter.MockitoExtension;import static org.junit.jupiter.api.Assertions.*;import static org.mockito.Mockito.*;@ExtendWith(MockitoExtension.class)public class TestMock{ //实际是new出来的，所以会调用构造器 @InjectMocks private UserService userService; //一般情况下mock出来后，会自动set或者反射进测试类，特殊情况需要手动操作 @Mock private UserMapper userMapper; @Test public void test(){ List&lt;User&gt; mockList = Arrays.asList( new User(1,&quot;zhangsan&quot;), new User(2,&quot;lisi&quot;), new User(3,&quot;wangwu&quot;) ); //自定义模拟返回值 when(userMapper.getList(anyInt())).thenReturn(mockList); List&lt;User&gt; result = userService.getList(); //自行验证输出的结果对不对 assertEquals(result.size(),2); verify(userMapper,times(2)).getList(anyInt());//最好指定类型，不要滥用any()，否则可能会空指针 }}","link":"/2023/03/20/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/java%E6%B5%8B%E8%AF%95mock/"},{"title":"java的math包","text":"hello world Math包toRadians：把角度转换成弧度 12double a = Math.toRadians(30);Math.sin(a) //不能直接填30","link":"/2023/03/20/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/java%E7%9A%84math%E5%8C%85/"},{"title":"stream使用","text":"hello world Streamparallel：并行流，发挥多核优势进行多线程操作，所以会有并发安全问题，比如排序失效等等。 中间操作filter：保留为true的 1.filter(e-&gt; e.getAge() &gt;= 18) //保留18岁以上的 map：返回新元素 1.map(User::getAge) //获取所有人的年龄 peek：可以操作元素，但保持stream中元素不变 1.peek(e-&gt; e.setAge(e.getAge() + 1)) //所有人年龄加1 flatMap：从元素中提取多个属性 1.flatMap(e-&gt; Stream.of(e.getBankA_Id,e.getBankB_Id)) //获取用户的所有不同银行的卡号 sorted：排序 limit：只保留前n个，后面的不要（跟mysql差不多） skip：跳过n个，保留剩下的 distinct：去重（需要重写hash和equals） 终结操作如果没有终结操作，stream是不会执行中间操作的 12list.stream().peek(System.out::println); //控制台不会打印list.stream().peek(System.out::println).collect(xxx); //除非有终结操作","link":"/2023/03/20/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/stream%E4%BD%BF%E7%94%A8/"},{"title":"多条件过滤，将一个list拆分成多个list","text":"hello world 多条件过滤，将一个list拆分成多个list需求userList获取年龄大于18和小于18的两个list，用stream最后只能获得一个，还要多跑一次循环 代码简易版，后期考虑支持获取T中的属性，比如过滤之后获取user的name 12345678910111213141516171819202122232425262728293031323334353637383940414243public class Test{ @Test public void test(){ List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); list.add(1); list.add(2); list.add(3); list.add(4); list.add(5); List&lt;List&lt;Integer&gt;&gt; splitList = splitList(list, i -&gt; i &gt; 1, i -&gt; i &gt; 3 ); splitList.forEach(e -&gt; { e.forEach(System.out::println); System.out.println(&quot;--------------------&quot;); }); } private &lt;T&gt; List&lt;List&lt;T&gt;&gt; splitList(Collection&lt;T&gt; originalList, Predicate&lt;T&gt;... predicates) { List&lt;List&lt;T&gt;&gt; resultList = new ArrayList&lt;&gt;(predicates.length); //n个条件，会拆分成n+1个list for (int i = 0; i &lt; predicates.length + 1; i++) { resultList.add(new ArrayList&lt;&gt;()); } for (T e : originalList) { boolean isAdd = false; for (int i = 0; i &lt; predicates.length; i++) { List&lt;T&gt; result = resultList.get(i); if (predicates[i].test(e)) { result.add(e); isAdd = true; } } //都不满足的加入最后一个list if (!isAdd) { List&lt;T&gt; noneMatch = resultList.get(predicates.length); noneMatch.add(e); } } return resultList; }} 优化：可以选择返回值 12345678910//伪代码MyList&lt;List&lt;Object&gt; list = splitList( originalList, stream(filter(i -&gt; i.getAge() &gt; 1),map(User::getName)), stream(filter(i -&gt; i.getAge() &gt; 3),map(User::getAge)),);//自动转换List&lt;String&gt; = list.get(0);List&lt;Integer&gt; = list.get(1);List&lt;User&gt; = list.getNoneMatch();","link":"/2023/03/03/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/%E5%A4%9A%E6%9D%A1%E4%BB%B6%E8%BF%87%E6%BB%A4%EF%BC%8C%E5%B0%86%E4%B8%80%E4%B8%AAlist%E6%8B%86%E5%88%86%E6%88%90%E5%A4%9A%E4%B8%AAlist/"},{"title":"胶水代码","text":"hello world 数据源 1234567String url = &quot;jdbc:sqlserver://192.168.5.207:1433;DatabaseName=RegisterSystem&quot;;String username = &quot;sa&quot;;String password = &quot;123456&quot;;HikariDataSource dataSource = new HikariDataSource();dataSource.setJdbcUrl(url);dataSource.setUsername(username);dataSource.setPassword(password); yml配置sqlserver 1234url: jdbc:sqlserver://localhost:1433;DatabaseName=testBusername: sapassword: 123456driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver","link":"/2023/02/21/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/%E8%83%B6%E6%B0%B4%E4%BB%A3%E7%A0%81/"},{"title":"springboot启动报错","text":"hello world 无法启动程序，yaml相关异常解决： 临时方案，删除yml中的中文注释 正确姿势，idea中setting，搜索encoding，在file encoding中把能改的都改成tf-8，清完后先clean一下 无法启动程序，读取不到application.yml解决： 特殊情况，pom.xml中修改了打包输出的位置，注释掉","link":"/2023/03/03/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/%E6%A1%86%E6%9E%B6/springboot/springboot%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/"},{"title":"ConfigurationProperties和Value注解","text":"hello world @Value如果在多个类中使用同一个值，改起来就会有点麻烦 @ConfigurationProperties可以把这些值统一到一起，方便维护 依赖引入后，idea编辑配置文件时会有自动补全 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;&lt;/dependency&gt; 使用配置文件 12345config-project: name: zhangsan my-switch: swagger: true encrypt: false 代码 12345678910111213141516171819@Component@Data//配置前缀@ConfigurationProperties(&quot;config-project&quot;)public class ConfigProject { private String name; //内部的嵌套结构，就需要通过注入的方式，等于说常规的只支持一级 @Autowired private Switch mySwitch; @Data @ConfigurationProperties(&quot;config-project.my-switch&quot;) @Component public class Switch { private boolean swagger; private boolean encrypt; }}","link":"/2023/03/03/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/%E6%A1%86%E6%9E%B6/springboot/ConfigurationProperties%E5%92%8CValue%E6%B3%A8%E8%A7%A3/"},{"title":"spring-jdbc使用","text":"spring-jdbc使用依赖12345&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;5.3.23&lt;/version&gt;&lt;/dependency&gt; 数据源 12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.2.11&lt;/version&gt;&lt;/dependency&gt; 编程式事务（手动commit，rollback）1234567891011121314public void test{ DruidDataSource dataSource = new DruidDataSource(); //低版本的为 DataSourceTransactionManager JdbcTransactionManager manager = new JdbcTransactionManager(dataSource); TransactionStatus status = manager.getTransaction(new DefaultTransactionDefinition()); JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource); try{ jdbcTemplate.update(&quot;update usr set name = ? where id = ?&quot;, &quot;hello&quot;, 1); manager.commit(status); }catch(Exception e){ manager.rollback(status); }} 查询 select返回单个字段queryForObject 1jdbcTemplate.queryForObject(&quot;select count(*) from user where id = ?&quot;, Integer.class, 1); 返回mapqueryForMap 1jdbcTemplate.queryForMap(&quot;select * from user where id = ?&quot;, 1); 返回List，单个字段queryForList 1jdbcTemplate.queryForList(&quot;select name from user where id &lt; ?&quot;, String.class, 5); 返回List，Map对象queryForList 12//不指定类型，默认返回mapjdbcTemplate.queryForList(&quot;select * from user where id &lt; ?&quot;, 5); 返回对象（需要手动映射）queryForObject 12345678RowMapper&lt;User&gt; userMapper = (rs, rowNum) -&gt; { log(&quot;rowNum:{}&quot;, rowNum); User user = new User(); user.setId(rs.getInt(&quot;id&quot;)); user.setName(rs.getString(&quot;name&quot;)); return user;};jdbcTemplate.queryForList(&quot;select * from user where id &lt; ?&quot;,userMapper, 5); 返回List&lt;对象&gt;（需要手动映射）query 12//同上jdbcTemplate.query(&quot;select * from user where id &lt; ?&quot;,userMapper, 5); in参数的处理in中需要多个参数，就要拼多少个? 所以sql需要做处理，下面是工具方法 12345678public static String getInParam(int size) { String param = &quot;?&quot;; List&lt;String&gt; list = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; size; i++) { list.add(param); } return String.join(&quot;,&quot;, list);} 所以完整的流程就是 123String sqlPre = &quot;select name from user where id in (%s)&quot;;String sql = String.format(sqlPre,getInParam(list.size()));jdbcTemplate.queryForList(sql, String.class, list.toArray()); 踩坑当参数有数组类型时需要把所有参数合并到一个数组中 1234567891011String name = &quot;&quot;;Object[] age = {1,2,3};//错误示范，报错：SQLServerException: The conversion from UNKNOWN to UNKNOWN is unsupported.jdbcTemplate.query(sql,name,age);//正确示范List&lt;String&gt; params = new ArrayList&lt;&gt;();params.add(form_no);params.addAll(Arrays.asList(worker));jdbcTemplate.update(sql,params.toArray()); 小计报错顺序： 没查到数据：EmptyResult 查到数据： 查一条数据，返回值有多条：IncorrectResultSize 查一个字段，返回值有多个：IncorrectResultSetColumnCount 方法中的参数为elementType的，返回字段只能有一个 自己写的对象必须写RowMapper手动绑定（辣鸡） 返回list不会为null","link":"/2023/02/21/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/%E6%A1%86%E6%9E%B6/spring/spring-jdbc%E4%BD%BF%E7%94%A8/"},{"title":"spring注入报空指针","text":"hello world 一个类中，有别的static属性被new之后，无法注入 12345678910111213141516public class Test{ private static String other = new String(); //空指针，无法注入 @Autowired private User user ; //解决1，也设置为static @Autowired private static User user ; //解决2，直接从容器中拿 @Autowired private User user = SpringUtil.getBean(User.class); }","link":"/2023/03/03/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/%E6%A1%86%E6%9E%B6/spring/spring%E6%B3%A8%E5%85%A5%E6%8A%A5%E7%A9%BA%E6%8C%87%E9%92%88/"},{"title":"学习编程的心路历程","text":"hello world 思维决定一切，代码只是工具敲代码和写文章一样，重点在于想要表达什么。 我向来不喜欢写作文，因为我认为很多事情，三两句话就能说清楚，为什么要写1000字的作文。 所以我喜欢数学，因为它干净，纯粹。","link":"/2023/04/07/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E5%AD%A6%E4%B9%A0%E7%BC%96%E7%A8%8B%E7%9A%84%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"},{"title":"regex正则表达式","text":"hello world 语法 ^：以xxx开头 1234^aa aabb //只会匹配前面的aabbaa //不匹配 $：以xxx为结尾，同上 字符簇： 12345[a-z] // 匹配所有的小写字母 [A-Z] // 匹配所有的大写字母 [a-zA-Z] // 匹配所有的字母 [0-9] // 匹配所有的数字[ \\f\\r\\t\\n] // 匹配所有的白字符 注意：只会匹配单个 123[a-z]3 a3bb2c3 //匹配a3、c3 [^]标识 非 1234[^0-9]a //只要不是0-9就行aaa //匹配第一个aa.a //匹配 注意上面：先到先得，不会重复匹配 123[^0-9]a //只要不是0-9就行aaa //只匹配第一个aa，之后这两个a就不会参与匹配，所以第二个a不会再和第三个a匹配 重复匹配 a{1,3}：匹配a、aa、aaa 1aaaa //只匹配aaa，以大局为重 a{2,}：至少两个连在一起 12aabbbb //匹配abbbb //不匹配 \\b：用于间隔单词 1234567891011121314151617hello\\b//匹配hello结尾的单词sjdflkajfhello //匹配sjdflkajfhello world//匹配helloasjdklf //不匹配\\bhello//匹配hello为开头的单词helloasjdklf //匹配world helloasjdklf //匹配sjdflkajfhello //不匹配\\bhello\\b//只匹配hello这个单词hi hello world //匹配helloasjdklf //不匹配world helloasjdklf //不匹配 实战案例已知变量名，获取该变量的所有值想要获取所有sql语句 123String sql = &quot;select 1&quot;;sql = &quot;select count(1) &quot;+ &quot; from user&quot;; 开头都是 sql = 结尾都是 &quot;; 中间不能出现分号，并且字符数不限制 [^;]{0,} 1(sql =)[^;]{0,}(&quot;;)","link":"/2023/03/20/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/regex%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"title":"cmd、bat语法","text":"语法注释：rem、@rem、::123rem 这里是注释@rem 这里是注释:: 这里是注释 打印文本到窗口：echo1echo hello bat文件执行完，cmd窗口不关闭：pause、cmdpause 按任意键直接关闭，不能继续输入命令 12echo hellopause cmd 可以接着输入命令 12echo hellocmd 查找文件：for1for /r &lt;目录&gt; %&lt;变量名&gt; in (&lt;文件名&gt;) do &lt;命令&gt; 打印hello目录下的所有png文件 为绝对路径 1for /r hello %img in (*.png) do @echo %img 删除hello目录下的所有开头为test的文件 注意del后面的文件名最好用 &quot;&quot; ，因为目录里可能出现空格 1for /r hello %testFile in (test*) do @del &quot;@testFile&quot;","link":"/2023/02/21/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/windows/cmd%E3%80%81bat%E8%AF%AD%E6%B3%95/"},{"title":"","text":"","link":"/2023/04/06/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/javascript/Untitled/"},{"title":"个人工具类-MeoUtil","text":"hello world meoUtiljdbc处理返回值 1234567891011121314private List&lt;Map&lt;String,Object&gt;&gt; handleResultSet(ResultSet rs){ List&lt;Map&lt;String,Object&gt;&gt; list = new ArrayList&lt;&gt;(); while (rs.next()) { Map&lt;String,Object&gt; map = new HashMap&lt;&gt;(); int columnCount = rs.getMetaData().getColumnCount(); for (int i = 0; i &lt; columnCount; i++) { String columnName = rs.getMetaData().getColumnName(i+1); Object value = rs.getObject(columnName); map.put(columnName,value); } list.add(map); } return map;} 12345678910private Map&lt;String,Object&gt; handleResultSet(ResultSet rs){ Map&lt;String,Object&gt; map = new HashMap&lt;&gt;(); int columnCount = rs.getMetaData().getColumnCount(); for (int i = 0; i &lt; columnCount; i++) { String columnName = rs.getMetaData().getColumnName(i+1); Object value = rs.getObject(columnName); map.put(columnName,value); } return map;} 打印打印map 12345public static void print(Map&lt;String, Object&gt; map) { for (String key : map.keySet()) { System.out.println(key + &quot;:&quot; + map.get(key)); }} 用{}拼接字符串，打印日志 1234public static void log(String temp, Object... objects) { temp = temp.replaceAll(&quot;%s&quot;, &quot;{}&quot;); System.out.println(String.format(temp, objects));} 文件类获取当前项目路径 123public static String getProjectPath(){ return System.getProperty(&quot;user.dir&quot;);} 获取文件扩展名 12345678private static String getExtension(String fileName_WithExtension, boolean withPoint) { int index = fileName_WithExtension.lastIndexOf(&quot;.&quot;); int length = fileName_WithExtension.length(); //结果是否保留 . 点 index = withPoint ? index : index + 1; String extension = fileName_WithExtension.substring(index, length); return extension;} 绘制类绘制无背景颜色的文字水印 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public static void drawImage_Text(String text, Color color, Font font, Double degree, float alpha, String outputFileName_WithExtension) throws IOException { FontDesignMetrics metrics = FontDesignMetrics.getMetrics(font); int width = metrics.stringWidth(text); int height = metrics.getHeight(); BufferedImage buffImg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB); Graphics2D g2d = buffImg.createGraphics(); // 设置图片透明 buffImg = g2d.getDeviceConfiguration().createCompatibleImage(width, height, Transparency.TRANSLUCENT); g2d.dispose(); g2d = buffImg.createGraphics(); // 设置对线段的锯齿状边缘处理 g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR); // 设置水印旋转 if (null != degree) { //注意rotate函数参数theta，为弧度制，故需用Math.toRadians转换一下 //以矩形区域中央为圆心旋转 g2d.rotate(Math.toRadians(degree), (double) buffImg.getWidth() / 2, (double) buffImg.getHeight() / 2); } // 设置颜色 g2d.setColor(color); // 设置 Font g2d.setFont(font); //设置透明度:1.0f为透明度 ，值从0-1.0，依次变得不透明 g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha)); int x = 0; int y = metrics.getAscent(); g2d.drawString(text, x, y); //释放资源 g2d.dispose(); //获取后缀 String extension = getExtension(outputFileName_WithExtension, false); ImageIO.write(buffImg, extension, new File(outputFileName_WithExtension));//写入文件}private static String getExtension(String fileName_WithExtension, boolean withPoint) { int index = fileName_WithExtension.lastIndexOf(&quot;.&quot;); int length = fileName_WithExtension.length(); index = withPoint ? index : index + 1; String extension = fileName_WithExtension.substring(index, length); return extension;}","link":"/2023/03/20/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/%E8%BD%AE%E5%AD%90/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%B1%BB-MeoUtil/"},{"title":"循环模型-ForEachUtil","text":"hello world ForEachUtil抽象出一些简单、常用的循环模型，然后以一种优雅的方式来处理。 通过方法名，就能清晰地看出，这一段循环做了什么事。 优缺点优点： 优雅 容易理解，方便维护 缺点： 需要new非常多东西 debug比较不方便 方法（方法名暂定）if_then1234567for(T t:list1){ for(R r:list2){ if(){ //xxx } }}","link":"/2023/04/06/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/%E8%BD%AE%E5%AD%90/%E5%BE%AA%E7%8E%AF%E6%A8%A1%E5%9E%8B-ForEachUtil/"}],"tags":[{"name":"生活感悟","slug":"生活感悟","link":"/tags/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"},{"name":"一句话系列","slug":"一句话系列","link":"/tags/%E4%B8%80%E5%8F%A5%E8%AF%9D%E7%B3%BB%E5%88%97/"},{"name":"踩坑","slug":"踩坑","link":"/tags/%E8%B8%A9%E5%9D%91/"},{"name":"todo","slug":"todo","link":"/tags/todo/"},{"name":"bug","slug":"bug","link":"/tags/bug/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"语法","slug":"语法","link":"/tags/%E8%AF%AD%E6%B3%95/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"实操教学","slug":"实操教学","link":"/tags/%E5%AE%9E%E6%93%8D%E6%95%99%E5%AD%A6/"},{"name":"挖坑","slug":"挖坑","link":"/tags/%E6%8C%96%E5%9D%91/"},{"name":"picgo","slug":"picgo","link":"/tags/picgo/"},{"name":"sqlserver","slug":"sqlserver","link":"/tags/sqlserver/"},{"name":"数据库","slug":"数据库","link":"/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"包管理","slug":"包管理","link":"/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"},{"name":"快捷键","slug":"快捷键","link":"/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"name":"便捷小技巧","slug":"便捷小技巧","link":"/tags/%E4%BE%BF%E6%8D%B7%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"name":"windows","slug":"windows","link":"/tags/windows/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"反射","slug":"反射","link":"/tags/%E5%8F%8D%E5%B0%84/"},{"name":"胶水代码","slug":"胶水代码","link":"/tags/%E8%83%B6%E6%B0%B4%E4%BB%A3%E7%A0%81/"},{"name":"框架","slug":"框架","link":"/tags/%E6%A1%86%E6%9E%B6/"},{"name":"java","slug":"java","link":"/tags/java/"}],"categories":[{"name":"生活感悟","slug":"生活感悟","link":"/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"},{"name":"编程","slug":"编程","link":"/categories/%E7%BC%96%E7%A8%8B/"},{"name":"语言","slug":"编程/语言","link":"/categories/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/"},{"name":"工具","slug":"编程/工具","link":"/categories/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/"},{"name":"计算机网络","slug":"编程/计算机网络","link":"/categories/%E7%BC%96%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"yarn","slug":"编程/工具/yarn","link":"/categories/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/yarn/"},{"name":"windows","slug":"编程/工具/windows","link":"/categories/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/windows/"},{"name":"javascript","slug":"编程/语言/javascript","link":"/categories/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/javascript/"},{"name":"docker","slug":"编程/工具/docker","link":"/categories/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/docker/"},{"name":"java","slug":"编程/语言/java","link":"/categories/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/"},{"name":"git","slug":"编程/工具/git","link":"/categories/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/git/"},{"name":"hexo","slug":"编程/工具/hexo","link":"/categories/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/hexo/"},{"name":"picgo","slug":"编程/工具/picgo","link":"/categories/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/picgo/"},{"name":"sqlserver","slug":"编程/工具/sqlserver","link":"/categories/%E7%BC%96%E7%A8%8B/%E5%B7%A5%E5%85%B7/sqlserver/"},{"name":"框架","slug":"编程/语言/java/框架","link":"/categories/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/%E6%A1%86%E6%9E%B6/"},{"name":"spring","slug":"编程/语言/java/框架/spring","link":"/categories/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/%E6%A1%86%E6%9E%B6/spring/"},{"name":"springboot","slug":"编程/语言/java/框架/springboot","link":"/categories/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80/java/%E6%A1%86%E6%9E%B6/springboot/"}],"pages":[]}